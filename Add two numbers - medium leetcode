//source:https://leetcode.com/problems/remove-one-element-to-make-the-array-strictly-increasing/
//solution:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

/**Solution:
 *l1: 2 - 4 - 3
 *l2: 5 - 6 - 4
 *
 *
 *
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode returnList = new ListNode(-1);
        ListNode current = returnList;
        
        int tempSum = 0;
        int tempCarry = 0;
        int tempNum1 = 0;
        int tempNum2 = 0;
        while(l1!=null || l2!=null){
            //if l1 still has element, get value of current element, else assign 0
            //same with l2
            tempNum1 = (l1!=null) ? l1.val : 0;
            tempNum2 = (l2!=null) ? l2.val : 0;
            
            //sum is num1+num2+carry
            tempSum = tempNum1 + tempNum2 + tempCarry;
            
            //newNode has value is the last digit of sum, first digit of sum will be carried
            ListNode newNode = new ListNode(tempSum%10);
            tempCarry = tempSum/10;
            //link the newNode to the list   
            current.next = newNode;
            
            //move to next node in each LinkedList
            if(l1!=null){
                l1=l1.next;
            }
            if(l2!=null){
                l2=l2.next;
            }
            current = current.next;
        }
        
        //if carry is not zero, that mean we need a new node
        if(tempCarry>0){
            ListNode newNode = new ListNode(tempCarry, null);
            current.next = newNode;
            current = current.next;
        }
        //return the list without the first node since we assigned its value with -1
        return returnList.next;
    }
    
}
